// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class LogPayment extends ethereum.Event {
  get params(): LogPayment__Params {
    return new LogPayment__Params(this);
  }
}

export class LogPayment__Params {
  _event: LogPayment;

  constructor(event: LogPayment) {
    this._event = event;
  }

  get client(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get day(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LogRegisteredUnavailableDay extends ethereum.Event {
  get params(): LogRegisteredUnavailableDay__Params {
    return new LogRegisteredUnavailableDay__Params(this);
  }
}

export class LogRegisteredUnavailableDay__Params {
  _event: LogRegisteredUnavailableDay;

  constructor(event: LogRegisteredUnavailableDay) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get day(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LogUnregisteredUnavailableDay extends ethereum.Event {
  get params(): LogUnregisteredUnavailableDay__Params {
    return new LogUnregisteredUnavailableDay__Params(this);
  }
}

export class LogUnregisteredUnavailableDay__Params {
  _event: LogUnregisteredUnavailableDay;

  constructor(event: LogUnregisteredUnavailableDay) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get day(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LogWithdrawn extends ethereum.Event {
  get params(): LogWithdrawn__Params {
    return new LogWithdrawn__Params(this);
  }
}

export class LogWithdrawn__Params {
  _event: LogWithdrawn;

  constructor(event: LogWithdrawn) {
    this._event = event;
  }

  get balance(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Gym extends ethereum.SmartContract {
  static bind(address: Address): Gym {
    return new Gym("Gym", address);
  }

  canTrainAtDate(client: Address, timestamp: BigInt): boolean {
    let result = super.call(
      "canTrainAtDate",
      "canTrainAtDate(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(client),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );

    return result[0].toBoolean();
  }

  try_canTrainAtDate(
    client: Address,
    timestamp: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canTrainAtDate",
      "canTrainAtDate(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(client),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  canTrainToday(client: Address): boolean {
    let result = super.call("canTrainToday", "canTrainToday(address):(bool)", [
      ethereum.Value.fromAddress(client)
    ]);

    return result[0].toBoolean();
  }

  try_canTrainToday(client: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canTrainToday",
      "canTrainToday(address):(bool)",
      [ethereum.Value.fromAddress(client)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxClientsPerDay(): BigInt {
    let result = super.call(
      "maxClientsPerDay",
      "maxClientsPerDay():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxClientsPerDay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxClientsPerDay",
      "maxClientsPerDay():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paymentToken(): Address {
    let result = super.call("paymentToken", "paymentToken():(address)", []);

    return result[0].toAddress();
  }

  try_paymentToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("paymentToken", "paymentToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paymentTraining(): BigInt {
    let result = super.call(
      "paymentTraining",
      "paymentTraining():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_paymentTraining(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "paymentTraining",
      "paymentTraining():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  trainingDaysMap(param0: BigInt, param1: BigInt): Address {
    let result = super.call(
      "trainingDaysMap",
      "trainingDaysMap(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toAddress();
  }

  try_trainingDaysMap(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "trainingDaysMap",
      "trainingDaysMap(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  unavailableDaysMap(param0: BigInt): boolean {
    let result = super.call(
      "unavailableDaysMap",
      "unavailableDaysMap(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBoolean();
  }

  try_unavailableDaysMap(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "unavailableDaysMap",
      "unavailableDaysMap(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get owner_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get paymentToken_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get paymentTraining_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get maxClientsPerDay_(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class PayCall extends ethereum.Call {
  get inputs(): PayCall__Inputs {
    return new PayCall__Inputs(this);
  }

  get outputs(): PayCall__Outputs {
    return new PayCall__Outputs(this);
  }
}

export class PayCall__Inputs {
  _call: PayCall;

  constructor(call: PayCall) {
    this._call = call;
  }

  get dayTimestamp(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class PayCall__Outputs {
  _call: PayCall;

  constructor(call: PayCall) {
    this._call = call;
  }
}

export class RegisterUnavailableDayCall extends ethereum.Call {
  get inputs(): RegisterUnavailableDayCall__Inputs {
    return new RegisterUnavailableDayCall__Inputs(this);
  }

  get outputs(): RegisterUnavailableDayCall__Outputs {
    return new RegisterUnavailableDayCall__Outputs(this);
  }
}

export class RegisterUnavailableDayCall__Inputs {
  _call: RegisterUnavailableDayCall;

  constructor(call: RegisterUnavailableDayCall) {
    this._call = call;
  }

  get dayTimestamp(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RegisterUnavailableDayCall__Outputs {
  _call: RegisterUnavailableDayCall;

  constructor(call: RegisterUnavailableDayCall) {
    this._call = call;
  }
}

export class UnregisterUnavailableDayCall extends ethereum.Call {
  get inputs(): UnregisterUnavailableDayCall__Inputs {
    return new UnregisterUnavailableDayCall__Inputs(this);
  }

  get outputs(): UnregisterUnavailableDayCall__Outputs {
    return new UnregisterUnavailableDayCall__Outputs(this);
  }
}

export class UnregisterUnavailableDayCall__Inputs {
  _call: UnregisterUnavailableDayCall;

  constructor(call: UnregisterUnavailableDayCall) {
    this._call = call;
  }

  get dayTimestamp(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnregisterUnavailableDayCall__Outputs {
  _call: UnregisterUnavailableDayCall;

  constructor(call: UnregisterUnavailableDayCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
